'use client';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FileDown, Printer, Copy, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

interface ReportDisplayProps {
  report: string;
  query: string;
}

export function ReportDisplay({ report, query }: ReportDisplayProps) {
  const { toast } = useToast();
  const [isDownloading, setIsDownloading] = useState(false);

  const handleDownload = async () => {
    setIsDownloading(true);
    try {
      const reportContentElement = document.getElementById('report-content');
      if (!reportContentElement) {
        toast({
            variant: "destructive",
            title: "Download Failed",
            description: "Could not find the report content to download.",
        });
        setIsDownloading(false);
        return;
      }
      
      const canvas = await html2canvas(reportContentElement, { 
        scrollY: -window.scrollY,
        useCORS: true,
        scale: 2, // Increase scale for better quality
      });

      const imgData = canvas.toDataURL('image/png');
      
      const pdf = new jsPDF({
        orientation: 'p',
        unit: 'pt', // Use points for better precision
        format: 'a4',
      });
      
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const margin = 40;
      
      const imgWidth = canvas.width;
      const imgHeight = canvas.height;
      const ratio = imgWidth / imgHeight;
      
      const contentWidth = pdfWidth - margin * 2;
      const contentHeight = contentWidth / ratio;
      
      let heightLeft = contentHeight;
      let position = margin;
      
      // Add a header to the first page
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text("IndiLaw AI Research Report", margin, margin);

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Query: ${query}`, margin, margin + 20);

      pdf.addImage(imgData, 'PNG', margin, margin + 40, contentWidth, contentHeight);
      heightLeft -= (pdfHeight - margin * 2 - 40);

      while (heightLeft > 0) {
        position = heightLeft - contentHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', margin, position + margin, contentWidth, contentHeight);
        heightLeft -= pdfHeight;
      }

      pdf.save('IndiLaw-AI-Report.pdf');
    } catch (error) {
        console.error("Error generating PDF:", error);
        toast({
            variant: "destructive",
            title: "Download Failed",
            description: "An error occurred while generating the PDF.",
        });
    } finally {
        setIsDownloading(false);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(report).then(() => {
      toast({ title: "Report copied to clipboard!" });
    }, () => {
      toast({ variant: "destructive", title: "Failed to copy report" });
    });
  };

  const handlePrint = () => {
    const printableContent = `
      <html>
        <head>
          <title>IndiLaw AI Research Report</title>
          <link rel="preconnect" href="https://fonts.googleapis.com">
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
          <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=PT+Sans:wght@400;700&display=swap" rel="stylesheet">
          <style>
            body { font-family: 'PT Sans', sans-serif; line-height: 1.6; color: #333; }
            h1, h2, h3 { font-family: 'Playfair Display', serif; color: #003366; }
            pre { white-space: pre-wrap; word-wrap: break-word; font-family: 'PT Sans', sans-serif; }
            @page { size: A4; margin: 1in; }
          </style>
        </head>
        <body>
          <h1>IndiLaw AI Research Report</h1>
          <h2>Query:</h2>
          <p>${query}</p>
          <hr />
          <h2>Generated Report:</h2>
          <pre>${report}</pre>
        </body>
      </html>
    `;
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(printableContent);
      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
    }
  };

  return (
    <Card className="shadow-lg animate-in fade-in-50">
      <CardHeader>
        <div className="flex justify-between items-start flex-wrap gap-4">
            <div>
                <CardTitle className="font-headline text-2xl">Legal Research Report</CardTitle>
                <CardDescription>Generated by IndiLaw AI for your query.</CardDescription>
            </div>
            <div className="flex items-center gap-2">
                <Button variant="ghost" size="icon" onClick={handleCopy} aria-label="Copy Report" disabled={isDownloading}>
                    <Copy className="h-4 w-4" />
                </Button>
                <Button variant="ghost" size="icon" onClick={handlePrint} aria-label="Print Report" disabled={isDownloading}>
                    <Printer className="h-4 w-4" />
                </Button>
                <Button onClick={handleDownload} disabled={isDownloading}>
                    {isDownloading ? (
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                        <FileDown className="mr-2 h-4 w-4" />
                    )}
                    {isDownloading ? 'Processing...' : 'Download PDF'}
                </Button>
            </div>
        </div>
      </CardHeader>
      <CardContent>
        <div id="report-content" className="prose prose-sm max-w-none rounded-md border bg-muted/30 p-4 h-[60vh] overflow-y-auto">
            <pre className="whitespace-pre-wrap font-body text-sm">{report}</pre>
        </div>
      </CardContent>
    </Card>
  );
}
